using System;

namespace solid.example.SRP.good
{
    public class ExploitationBusiness
    {
        private ExploitationGouvernementProxy _GouvProxy;
        private ExploitationDao _QueryDao;

        public ExploitationBusiness()
        {
            _GouvProxy = new ExploitationGouvernementProxy();
            _QueryDao = new ExploitationDao();
        }

        public void Add(Exploitation exp)
        {
            if(isValid(exp))
            {
                _QueryDao.Insert(exp);
            }
        }
        public void Update(Exploitation exp)
        {
            if (isValid(exp))
            {
                _QueryDao.Update(exp);
            }
        }
        public void Remove(Exploitation exp)
        {
            _QueryDao.Delete(exp);
        }

        private bool isValid(Exploitation exp)
        {
            return (_GouvProxy.CheckSiretExisteGouvernementApi(exp) 
                        && validationSiret(exp) 
                        && validationNom(exp) 
                        && validationRaisonSociale(exp));
        }

        private bool validationSiret(Exploitation exp)
        {

            // validation siret
            // verification not nulle
            if (string.IsNullOrWhiteSpace(exp.Siret))
            {
                return false;
            }
            // verification longueur 14
            //if (societe.Siret.Count() != 14)
            //{
            //    throw new BusinessException(BusinessExceptionCode.NO_VALIDE_SIRET, "Le numéro Siret est non valide");
            //}
            // verification int 
            if (!Int64.TryParse(exp.Siret, out Int64 res))
            {
                return false;
            }
            // Validation de Luhn
            int total = 0;
            int digit = 0;
            for (int i = 0; i < exp.Siret.Length; i++)
            {
                /** Recherche les positions impaires : 1er, 3è, 5è, etc... que l'on multiplie par 2
                   petite différence avec la définition ci-dessus car ici on travail de gauche à droite */

                if ((i % 2) == 0)
                {
                    digit = int.Parse(exp.Siret[i].ToString()) * 2;
                    /** si le résultat est >9 alors il est composé de deux digits tous les digits devant 
                    s'additionner et ne pouvant être >19 le calcule devient : 1 + (digit -10) ou : digit - 9 */

                    if (digit > 9) digit -= 9;
                }
                else
                {
                    digit = int.Parse(exp.Siret[i].ToString());
                }
                total += digit;
            }

            /** Si la somme est un multiple de 10 alors le SIRET est valide */
            if ((total % 10) != 0)
            {
                return false;
            }
            return true;
        }

        private bool validationNom(Exploitation exp)
        {
            // validation name
            if (string.IsNullOrWhiteSpace(exp.Nom))
            {
                return false;
            }

            return true;
        }

        private bool validationRaisonSociale(Exploitation exp)
        {
            // validation name
            if (string.IsNullOrWhiteSpace(exp.RaisonSociale))
            {
                return false;
            }

            return true;
        }
    }
}
