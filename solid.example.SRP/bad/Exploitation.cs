using MySql.Data.MySqlClient;
using System;
using System.Net.Http;

namespace solid.example.SRP.bad
{
    class Exploitation
    {

        private MySqlConnection _Connection;

        private HttpClient _HttpClient;

        public string Nom { get; set; }
        public string RaisonSociale { get; set; }
        public string Siret { get; set; }

        public Exploitation()
        {
            // MySQL Connection
            string connectionString = "SERVER=127.0.0.1; DATABASE=mli; UID=root; PASSWORD=";
            this._Connection = new MySqlConnection(connectionString);
            _HttpClient = new HttpClient();
        }

        public void Insert()
        {
            var ok = isValid();
            if(ok)
            {
                this._Connection.Open();

                // Création d'une commande SQL en fonction de l'objet connection
                MySqlCommand cmd = this._Connection.CreateCommand();
                // INSERT INTO Exploitation
                // (............)
                // VALUES
                // (............)
            }
        }

        private bool isValid()
        {
            return (checkSiretExisteGouvernementApi() && validationSiret() && validationNom() && validationRaisonSociale());
        }

        public void Update()
        {
            var ok = isValid();
            if (ok)
            {
                this._Connection.Open();

                // Création d'une commande SQL en fonction de l'objet connection
                MySqlCommand cmd = this._Connection.CreateCommand();

                // UPDATE Exploitation
                // SET .........
            }
        }

        public void Delete()
        {
            this._Connection.Open();

            // Création d'une commande SQL en fonction de l'objet connection
            MySqlCommand cmd = this._Connection.CreateCommand();

            // DELETE FROM Exploitation
            // WHERE .....
        }

        private bool checkSiretExisteGouvernementApi()
        {

            var result = _HttpClient.PostAsync("http://api.gouv.fr/siret/exist", new StringContent(this.Siret)).Result;
            if(result.IsSuccessStatusCode)
            {
                return false;
            }
            return true;

        }

        private bool validationSiret()
        {

            // validation siret
            // verification not nulle
            if (string.IsNullOrWhiteSpace(this.Siret))
            {
                return false;
            }
            // verification longueur 14
            //if (societe.Siret.Count() != 14)
            //{
            //    throw new BusinessException(BusinessExceptionCode.NO_VALIDE_SIRET, "Le numéro Siret est non valide");
            //}
            // verification int 
            if (!Int64.TryParse(this.Siret, out Int64 res))
            {
                return false;
            }
            // Validation de Luhn
            int total = 0;
            int digit = 0;
            for (int i = 0; i < this.Siret.Length; i++)
            {
                /** Recherche les positions impaires : 1er, 3è, 5è, etc... que l'on multiplie par 2
                   petite différence avec la définition ci-dessus car ici on travail de gauche à droite */

                if ((i % 2) == 0)
                {
                    digit = int.Parse(this.Siret[i].ToString()) * 2;
                    /** si le résultat est >9 alors il est composé de deux digits tous les digits devant 
                    s'additionner et ne pouvant être >19 le calcule devient : 1 + (digit -10) ou : digit - 9 */

                    if (digit > 9) digit -= 9;
                }
                else
                {
                    digit = int.Parse(this.Siret[i].ToString());
                }
                total += digit;
            }

            /** Si la somme est un multiple de 10 alors le SIRET est valide */
            if ((total % 10) != 0)
            {
                return false;
            }
            return true;
        }

        private bool validationNom()
        {
            // validation name
            if (string.IsNullOrWhiteSpace(this.Nom))
            {
                return false;
            }

            return true;
        }
        
        private bool validationRaisonSociale()
        {
            // validation name
            if (string.IsNullOrWhiteSpace(this.RaisonSociale))
            {
                return false;
            }

            return true;
        }

    }
}
